#!/bin/bash

# Have location that stores the config files
# 1. create a config
#   prompt for values and save
# view, edit, delete, list, run
#
# declare TITLE="Example Backup"
# declare DESCRIPTION="This is just an example."
# declare BACKUP_NAME="example_backup"
# declare BACKUP_TYPE="ARCHIVE" # or SYNC
# declare SOURCE="*"
# declare DESTINATION="$HOME/mybackups"
# declare WORKING_PATH="$HOME/Pictures"
# declare EXCLUDE='Screenshots'

Help() {
    echo "
Creates a tar.gz backup with date/time in the file name.

    Required Information:
    - included files/dirs       [<BACKUP_NAME>.include]
    - excluded files/dirs       [<BACKUP_NAME>.exclude]
    - destination directory     [export DESTINATION=..]
    - backup name               [argument -n]

    Setup:
        - Create two files with the same prefix
          suffix should be .include and .exclude accordingly
            Ex.
                mybackup.include
                mybackup.exclude
        - Set the destination path
            export DESTINATION=<location to store backups>
            Ex.
                export DESTINATION=\$HOME/mybackups
        - Execute backup with prefix
            Ex.
                backup -n mybackup

    Usage:
        param: [-h] Display this help
        param: [-n] Name of the backup
"
}


ShortHelp() {
    echo "
    Usage:
        backup <arg1, arg2, ..>
    Arguments:
        -h, help
        -n <name>, name of the backup
"
}


CheckInputs() {
    echo "  Validating backup parameters.."
    if [ -z $BACKUP_TYPE ]; then
        echo "Error - Missing required backup type"
    else
        if [ ! $BACKUP_TYPE = "ARCHIVE" ] && [ ! $BACKUP_TYPE = "SYNC" ]; then
            echo "Error - Invalid backup type: $BACKUP_TYPE"
            echo "  Valid types: ARCHIVE or SYNC"
            exit 1
        fi
    fi

    if [ -z "$SOURCE" ]; then
        echo "  Error - Missing required source"
        exit 1
    fi

    if [ -z $DESTINATION ]; then
        echo "Error - Missing required destination"
        exit 1
    elif [ ! -d $DESTINATION ]; then
        echo "  Backup destination does not exist. Attempting to create:"
        echo "    $DESTINATION"
        mkdir -p $DESTINATION
        if [ $? -ne 0 ]; then
            echo "Error - Unable to create destination path: $DESTINATION"
            exit 1
        else
            echo "    Created directory at $DESTINATION"
        fi
    fi

    if [ -z $WORKING_PATH ]; then
        # If no working path, then the source must be an absolute path
        if [ ! -d $SOURCE ]; then
            echo "Error - Source does not exist or is a relative path:"
            echo "  $SOURCE"
            echo "  Either add a working directory or enter an existing source path"
            exit 1
        fi
    else
        # tar --directory or -C does not work when source is a pattern
        cd $WORKING_PATH
    fi
}


ArchiveBackup() {
    tar \
        --create \
        --gzip \
        --verbose \
        --file=$BACKUP_PATH \
        --exclude=$EXCLUDE \
        $SOURCE
    if [ $? -eq 0 ]; then
        echo "Backup file saved to"
        echo $BACKUP_PATH
    else
        echo "Error - creating backup file"
    fi
}


SyncBackup() {
    echo "Sync backup, coming to a Linux distro near you!"
}


##############################################
#                    Main                    #
##############################################
declare BACKUP_EXT=".tar.gz"
declare DATE_TIME=$(date +"%Y%m%d_%H%M%S")

if [ $# -eq 0 ]; then
    echo "Where are the arguments?"
    exit 1
elif [ $# -eq 1 ]; then
    if [ ! -f $1 ]; then
        echo "Error - Backup config file does not exist:"
        echo "  $1"
        exit 1
    fi
else
    echo "You don't know how to use this, do you?"
    exit 1
fi

echo "Starting backup.."

source $1
CheckInputs
BACKUP_PATH=${DESTINATION}/${BACKUP_NAME}_${DATE_TIME}${BACKUP_EXT}

echo "  Title: $TITLE"
echo "  Description: $DESCRIPTION"

if [ $BACKUP_TYPE = "ARCHIVE" ]; then
    ArchiveBackup
elif [ $BACKUP_TYPE = "SYNC " ]; then
    SyncBackup
else
    echo "Error - Invalid backup type: $BACKUP_TYPE"
fi

exit 0